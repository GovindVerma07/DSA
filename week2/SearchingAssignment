Q1. Given an array. FInd the number X in the array. If the element is present, return the index of the element, else print “Element not
    found in array”. Input the size of array, array from user and the element X from user. Use Linear Search to find the element.
Ans. import java.util.Scanner;

    public class DSASearching1 {
     public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the number of elements : ");
        int n = sc.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter the elements : ");
        for(int i = 0; i < arr.length; i++){
            arr[i] = sc.nextInt();
        }
        System.out.print("Enter the element you want to search : ");
        int ele = sc.nextInt();
        int idx = -1;

        for(int i = 0; i < arr.length; i++){
        if(arr[i] == ele){
           idx = i;
        }
       }
       if(idx != -1){
        System.out.println("Element is present at location : "+idx);
       }
       else{
        System.out.println("Element is not found in array");
       }
       sc.close();

     }
   }

Q2. Given an array and an integer “target”, return the last occurrence of “target” in the array. If the target is not present return -1.
Ans. import java.util.Scanner;

    public class DSASearching2 {
      public static int lastOccurence(int[] arr, int ele){
        int first = 0,last = arr.length-1;
        int find = -1;
        while(first <= last){
        int mid = first + (last-first)/2;
        if(arr[mid] == ele){
            find = mid;
            first = mid+1;
        }
        else if(arr[mid] < ele){
            first = mid+1;
        }
        else{
            last = mid-1;
        }
        }
        return find;
      }
      public static void main(String[] args) {
        System.out.println("Enter the number of elements : ");
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] arr = new int[n];
        System.out.println("Enter the elements : ");
        for(int i = 0; i < arr.length; i++){
            arr[i] = sc.nextInt();
        }
        System.out.println("Enter the element you want to search : ");
        int ele = sc.nextInt();  
        if(lastOccurence(arr, ele) != -1){
            System.out.println("The last occurence of element is "+lastOccurence(arr, ele));
        } 
        else{
            System.out.println("Element is not present so index : "+lastOccurence(arr, ele));
        } 
        sc.close();
      }
    }

Q3. Given a sorted binary array, efficiently count the total number of 1’s in it.
Ans. import java.util.Scanner;

    public class DSASearching3 {
    public static int noOfOnes(int[] arr){
        int first = 0, last = arr.length-1;
        int find = -1;
        while(first <= last){
            int mid= first + (last-first)/2;
            if(arr[mid] == 1){
                find = mid;
                last = mid -1;
            }
            else{
                first = mid+1;
            }
        }
        return find;
     }
     public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the number of elements in Array : ");
        int n = sc.nextInt();
        int[] arr =  new int[n];
        System.out.println("Enter the elements in Sorted Binary form : ");
        for(int i = 0; i < arr.length; i++){
            arr[i] = sc.nextInt();
        }

        int occurence = noOfOnes(arr);
        if(occurence != -1){
            System.out.println("No of 1's are "+(arr.length-occurence));
        }
        else{
            System.out.println("Zero 1's are present");
        }
        sc.close();
     }
   }

Q4. Given a sorted integer array containing duplicates, count occurrences of a given number. If the element is not found in the array, report that as well.
Ans. import java.util.Scanner;

    public class DSASearching4 {
    public static int firstOccurence(int[] arr,int ele){
        int low = 0, high = arr.length -1;
        int find = -1;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(arr[mid] == ele){
                find = mid;
                high = mid - 1;
            }
            else if(arr[mid] > ele){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return find;
      }

        public static int lastOccurence(int[] arr,int ele){
        int low = 0, high = arr.length -1;
        int find = -1;
        while(low <= high){
            int mid = low + (high - low)/2;
            if(arr[mid] == ele){
                find = mid;
                low = mid + 1;
            }
            else if(arr[mid] > ele){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return find;
    }
   public static void main(String[] args) {
    Scanner sc = new Scanner(System.in);
    System.out.println("Enter the number of elements : ");
    int n = sc.nextInt();
    int[] arr = new int[n];
    System.out.println("Enter elements : ");
    for(int i = 0; i < arr.length; i++){
        arr[i] = sc.nextInt();
    }
    System.out.println("Enter the element you want to search : ");
    int ele = sc.nextInt();
    int first = firstOccurence(arr, ele);
    int last = lastOccurence(arr, ele);
    if(first==last && first == -1){
        System.out.println("Element is not present");
    }
    else{
        System.out.println("Number of Times element present : "+ (last - first + 1));
    }
    sc.close();
   }
  }

Q5: Given a positive integer num, return true if num is a perfect square or false otherwise.
    A perfect square is an integer that is the square of an integer. In other words, it is the product of some integer with itself.
Ans. import java.util.Scanner;

   public class DSASearching5 {
    public static boolean perfectSquare(int num){
        int low = 0, high = num;
        boolean isSquare = false;
        while(low <= high){
            int mid = low + (high-low)/2;
            int val = mid*mid;
            if(val == num){
                isSquare = true;
                break;
            }
            else if(val > num){
                high = mid - 1;
            }
            else{
                low = mid + 1;
            }
        }
        return isSquare;
    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter a number : ");
        int num = sc.nextInt();
        boolean isSquare = perfectSquare(num);
        System.out.println(isSquare);
        sc.close();   
    }
  }


